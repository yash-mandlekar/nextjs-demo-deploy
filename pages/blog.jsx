import { Inter } from "@next/font/google";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import styles from "../styles/home.module.css";
import InfiniteScroll from "react-infinite-scroll-component";
const inter = Inter({ subsets: ["latin"] });

const blog = ({ allBlogs, length }) => {
  const [blogs, setBlogs] = useState(allBlogs);
  const [count, setCount] = useState(2);
  const fetchBlogs = async () => {
    const d = await fetch(
      `http://localhost:3000/api/blogs/?count=${count + 4}`
    );
    setCount(count + 2);
    const data = await d.json();
    console.log(data);
    setBlogs(data.files);
  };

  return (
    <main className={styles.main}>
      <Head>
        <title>Blog Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.grid}>
        <InfiniteScroll
          dataLength={blogs.length} //This is important field to render the next data
          next={fetchBlogs}
          hasMore={blogs.length !== length}
          loader={<h4>Loading...</h4>}
          endMessage={
            <p style={{ textAlign: "center" }}>
              <b>Yay! You have seen it all</b>
            </p>
          }
        >
          {blogs?.map((e, i) => (
            <div key={i} className={styles.card}>
              <Link href={`/blogpost/${e.slug}`} className={inter.className}>
                {e.title}
              </Link>
              <p className={inter.className}>{e.content.slice(0, 55)}...</p>
            </div>
          ))}
        </InfiniteScroll>
      </div>
    </main>
  );
};
export async function getServerSideProps(context) {
  const d = await fetch("http://localhost:3000/api/blogs?count=2");
  const data = await d.json();
  return {
    props: { allBlogs: data.files, length: data.length },
  };
}
export default blog;
